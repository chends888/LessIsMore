
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIG BOOLVAL CLOSEPAR DIV DO ELSE ENDFUNC ENDIF ENDLOOP EQUALS FUNC GREATER IDENT IF INPUT INT LESS MINUS MUL NOT OPENPAR OR PLUS PRINT THEN VARDEC WHILE\n    stmts : stmt\n          | stmts stmt\n    stmt : VARDEC IDENTstmt : IDENT ASSIG relexprstmt : PRINT relexprstmt : VARDEC FUNC IDENT OPENPAR CLOSEPAR ASSIG stmts ENDFUNCstmt : WHILE relexpr DO stmts ENDLOOPstmt : IF relexpr THEN stmts ENDIF\n            | IF relexpr THEN stmts ELSE stmts ENDIF\n    relexpr : expr\n            | expr GREATER expr\n            | expr LESS expr\n            | expr EQUALS expr\n    \n    expr : term\n         | term PLUS term\n         | term MINUS term\n         | term OR term\n    \n    term : factor\n         | factor MUL factor\n         | factor DIV factor\n         | factor AND factor\n    \n    factor : INT\n           | IDENT\n           | BOOLVAL\n           | PLUS factor\n           | MINUS factor\n           | NOT factor\n           | OPENPAR relexpr CLOSEPAR\n           | INPUT OPENPAR CLOSEPAR\n    '
    
_lr_action_items = {'VARDEC':([0,1,2,8,9,12,13,14,17,18,19,20,27,34,35,39,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,],[3,3,-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,3,3,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,3,3,-7,-8,3,3,3,3,-9,-6,]),'IDENT':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,],[4,4,-1,9,19,19,19,-2,-3,26,19,-5,-10,-14,19,19,-18,-22,-23,-24,19,19,-4,19,19,19,19,19,19,-25,-26,19,19,19,-27,4,4,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,4,4,-7,-8,4,4,4,4,-9,-6,]),'PRINT':([0,1,2,8,9,12,13,14,17,18,19,20,27,34,35,39,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,],[5,5,-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,5,5,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,5,5,-7,-8,5,5,5,5,-9,-6,]),'WHILE':([0,1,2,8,9,12,13,14,17,18,19,20,27,34,35,39,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,],[6,6,-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,6,6,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,6,6,-7,-8,6,6,6,6,-9,-6,]),'IF':([0,1,2,8,9,12,13,14,17,18,19,20,27,34,35,39,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,],[7,7,-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,7,7,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,7,7,-7,-8,7,7,7,7,-9,-6,]),'$end':([1,2,8,9,12,13,14,17,18,19,20,27,34,35,39,45,46,47,48,49,50,51,52,53,54,55,59,60,65,66,],[0,-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,-7,-8,-9,-6,]),'ENDLOOP':([2,8,9,12,13,14,17,18,19,20,27,34,35,39,45,46,47,48,49,50,51,52,53,54,55,56,59,60,65,66,],[-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,59,-7,-8,-9,-6,]),'ENDIF':([2,8,9,12,13,14,17,18,19,20,27,34,35,39,45,46,47,48,49,50,51,52,53,54,55,57,59,60,63,65,66,],[-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,60,-7,-8,65,-9,-6,]),'ELSE':([2,8,9,12,13,14,17,18,19,20,27,34,35,39,45,46,47,48,49,50,51,52,53,54,55,57,59,60,65,66,],[-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,61,-7,-8,-9,-6,]),'ENDFUNC':([2,8,9,12,13,14,17,18,19,20,27,34,35,39,45,46,47,48,49,50,51,52,53,54,55,59,60,64,65,66,],[-1,-2,-3,-5,-10,-14,-18,-22,-23,-24,-4,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,-7,-8,66,-9,-6,]),'FUNC':([3,],[10,]),'ASSIG':([4,58,],[11,62,]),'INT':([5,6,7,11,15,16,21,22,28,29,30,31,32,33,36,37,38,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'BOOLVAL':([5,6,7,11,15,16,21,22,28,29,30,31,32,33,36,37,38,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'PLUS':([5,6,7,11,14,15,16,17,18,19,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,51,52,53,54,55,],[15,15,15,15,31,15,15,-18,-22,-23,-24,15,15,15,15,15,15,15,15,-25,-26,15,15,15,-27,-19,-20,-21,-28,-29,]),'MINUS':([5,6,7,11,14,15,16,17,18,19,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,51,52,53,54,55,],[16,16,16,16,32,16,16,-18,-22,-23,-24,16,16,16,16,16,16,16,16,-25,-26,16,16,16,-27,-19,-20,-21,-28,-29,]),'NOT':([5,6,7,11,15,16,21,22,28,29,30,31,32,33,36,37,38,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'OPENPAR':([5,6,7,11,15,16,21,22,23,26,28,29,30,31,32,33,36,37,38,],[22,22,22,22,22,22,22,22,41,44,22,22,22,22,22,22,22,22,22,]),'INPUT':([5,6,7,11,15,16,21,22,28,29,30,31,32,33,36,37,38,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'DO':([13,14,17,18,19,20,24,34,35,39,45,46,47,48,49,50,51,52,53,54,55,],[-10,-14,-18,-22,-23,-24,42,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,]),'THEN':([13,14,17,18,19,20,25,34,35,39,45,46,47,48,49,50,51,52,53,54,55,],[-10,-14,-18,-22,-23,-24,43,-25,-26,-27,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,]),'CLOSEPAR':([13,14,17,18,19,20,34,35,39,40,41,44,45,46,47,48,49,50,51,52,53,54,55,],[-10,-14,-18,-22,-23,-24,-25,-26,-27,54,55,58,-11,-12,-13,-15,-16,-17,-19,-20,-21,-28,-29,]),'GREATER':([13,14,17,18,19,20,34,35,39,48,49,50,51,52,53,54,55,],[28,-14,-18,-22,-23,-24,-25,-26,-27,-15,-16,-17,-19,-20,-21,-28,-29,]),'LESS':([13,14,17,18,19,20,34,35,39,48,49,50,51,52,53,54,55,],[29,-14,-18,-22,-23,-24,-25,-26,-27,-15,-16,-17,-19,-20,-21,-28,-29,]),'EQUALS':([13,14,17,18,19,20,34,35,39,48,49,50,51,52,53,54,55,],[30,-14,-18,-22,-23,-24,-25,-26,-27,-15,-16,-17,-19,-20,-21,-28,-29,]),'OR':([14,17,18,19,20,34,35,39,51,52,53,54,55,],[33,-18,-22,-23,-24,-25,-26,-27,-19,-20,-21,-28,-29,]),'MUL':([17,18,19,20,34,35,39,54,55,],[36,-22,-23,-24,-25,-26,-27,-28,-29,]),'DIV':([17,18,19,20,34,35,39,54,55,],[37,-22,-23,-24,-25,-26,-27,-28,-29,]),'AND':([17,18,19,20,34,35,39,54,55,],[38,-22,-23,-24,-25,-26,-27,-28,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmts':([0,42,43,61,62,],[1,56,57,63,64,]),'stmt':([0,1,42,43,56,57,61,62,63,64,],[2,8,2,2,8,8,2,2,8,8,]),'relexpr':([5,6,7,11,22,],[12,24,25,27,40,]),'expr':([5,6,7,11,22,28,29,30,],[13,13,13,13,13,45,46,47,]),'term':([5,6,7,11,22,28,29,30,31,32,33,],[14,14,14,14,14,14,14,14,48,49,50,]),'factor':([5,6,7,11,15,16,21,22,28,29,30,31,32,33,36,37,38,],[17,17,17,17,34,35,39,17,17,17,17,17,17,17,51,52,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmts","S'",1,None,None,None),
  ('stmts -> stmt','stmts',1,'p_stmts','lexer_parser.py',131),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','lexer_parser.py',132),
  ('stmt -> VARDEC IDENT','stmt',2,'p_vardec','lexer_parser.py',136),
  ('stmt -> IDENT ASSIG relexpr','stmt',3,'p_assig','lexer_parser.py',140),
  ('stmt -> PRINT relexpr','stmt',2,'p_print','lexer_parser.py',144),
  ('stmt -> VARDEC FUNC IDENT OPENPAR CLOSEPAR ASSIG stmts ENDFUNC','stmt',8,'p_funcdec','lexer_parser.py',148),
  ('stmt -> WHILE relexpr DO stmts ENDLOOP','stmt',5,'p_while','lexer_parser.py',152),
  ('stmt -> IF relexpr THEN stmts ENDIF','stmt',5,'p_if','lexer_parser.py',156),
  ('stmt -> IF relexpr THEN stmts ELSE stmts ENDIF','stmt',7,'p_if','lexer_parser.py',157),
  ('relexpr -> expr','relexpr',1,'p_relexpr','lexer_parser.py',162),
  ('relexpr -> expr GREATER expr','relexpr',3,'p_relexpr','lexer_parser.py',163),
  ('relexpr -> expr LESS expr','relexpr',3,'p_relexpr','lexer_parser.py',164),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relexpr','lexer_parser.py',165),
  ('expr -> term','expr',1,'p_expr','lexer_parser.py',171),
  ('expr -> term PLUS term','expr',3,'p_expr','lexer_parser.py',172),
  ('expr -> term MINUS term','expr',3,'p_expr','lexer_parser.py',173),
  ('expr -> term OR term','expr',3,'p_expr','lexer_parser.py',174),
  ('term -> factor','term',1,'p_term','lexer_parser.py',180),
  ('term -> factor MUL factor','term',3,'p_term','lexer_parser.py',181),
  ('term -> factor DIV factor','term',3,'p_term','lexer_parser.py',182),
  ('term -> factor AND factor','term',3,'p_term','lexer_parser.py',183),
  ('factor -> INT','factor',1,'p_factor','lexer_parser.py',189),
  ('factor -> IDENT','factor',1,'p_factor','lexer_parser.py',190),
  ('factor -> BOOLVAL','factor',1,'p_factor','lexer_parser.py',191),
  ('factor -> PLUS factor','factor',2,'p_factor','lexer_parser.py',192),
  ('factor -> MINUS factor','factor',2,'p_factor','lexer_parser.py',193),
  ('factor -> NOT factor','factor',2,'p_factor','lexer_parser.py',194),
  ('factor -> OPENPAR relexpr CLOSEPAR','factor',3,'p_factor','lexer_parser.py',195),
  ('factor -> INPUT OPENPAR CLOSEPAR','factor',3,'p_factor','lexer_parser.py',196),
]
